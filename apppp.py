# -*- coding: utf-8 -*-
"""apppp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q-PL0jFI57zhNPPuSLVGwKePhKy7DuQS
"""

import streamlit as st
import pandas as pd
import joblib
from joblib import load
import pickle
import os
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load model
model = joblib.load('xgboost_personality_model.joblib')
url = "https://raw.githubusercontent.com/Khoerudin683/proyek-data-mining/main/personality_dataset.csv"
df = pd.read_csv(url)

# Judul halaman
st.set_page_config(page_title="Prediksi Personality", layout="centered")

# Sidebar untuk navigasi
page = st.sidebar.selectbox("Navigasi", ["Pendahuluan", "Model", "Prediksi", "Anggota Kelompok"])

# 1. Halaman Pendahuluan
if page == "Pendahuluan":
    st.title("üìä Pendahuluan")
    st.write("""
    Dataset ini berisi data kepribadian yang digunakan untuk mengklasifikasikan seseorang sebagai *Introvert* atau *Extrovert* berdasarkan beberapa fitur sosial seperti:
    
    - Waktu sendirian
    - Kehadiran di acara sosial
    - Ukuran lingkaran pertemanan
    - Frekuensi posting
    - Perasaan lelah setelah bersosialisasi
    - Rasa takut tampil
    
    Dataset terdiri dari 5000 data dan telah digunakan untuk melatih model XGBoost.
    """)
    
    # Tampilkan sampel data
    df = pd.read_csv("personality_dataset.csv")
    st.dataframe(df.head())

# 2. Halaman Model
elif page == "Model":
    st.title("üß† Model Machine Learning")
    st.write("""
    Model yang digunakan adalah **XGBoost Classifier**, dilatih dengan akurasi lebih dari **99%**.

    Model dilatih pada fitur:
    - Time_spent_Alone
    - Stage_fear
    - Social_event_attendance
    - Going_outside
    - Drained_after_socializing
    - Friends_circle_size
    - Post_frequency
    """)

    import matplotlib.pyplot as plt
    import seaborn as sns
    from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
    from sklearn.preprocessing import LabelEncoder
    
    st.title("üìä Evaluasi Model Kepribadian")
    
    # Load dataset dan model
    df = pd.read_csv("personality_dataset.csv")
    model = joblib.load("xgboost_personality_model.joblib")
    
    # Pisahkan fitur dan label
    X = df.drop("Personality", axis=1)
    y = df["Personality"]
    
    # Pastikan semua fitur numerik
    X = X.copy()
    for col in X.columns:
        if X[col].dtype == "object":
            X[col] = X[col].map({"Yes": 1, "No": 0})  # Bisa disesuaikan jika ada kolom lain
    
    # Encode label
    le = LabelEncoder()
    y_encoded = le.fit_transform(y)
    
    # Prediksi
    y_pred = model.predict(X)
    
    # Evaluasi
    acc = accuracy_score(y_encoded, y_pred)
    report = classification_report(y_encoded, y_pred, target_names=le.classes_)
    cm = confusion_matrix(y_encoded, y_pred)
    
    # Tampilkan hasil
    st.subheader("üéØ Akurasi Model")
    st.success(f"Akurasi: {acc:.4f}"*100"%")
    
    st.subheader("üìÑ Classification Report")
    st.code(report)
    
    # Confusion matrix visual
    st.subheader("üîç Confusion Matrix")
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=le.classes_, yticklabels=le.classes_, ax=ax)
    plt.xlabel("Prediksi")
    plt.ylabel("Aktual")
    plt.title("Confusion Matrix")
    st.pyplot(fig)


    st.success("Model berhasil dimuat dan siap digunakan untuk prediksi.")

# 3. Halaman Prediksi
elif page == "Prediksi":
    st.title("üîÆ Prediksi Kepribadian")

    # Form input data
    with st.form("prediction_form"):
        alone = st.slider("waktu yang dihabiskan sendirian (0‚Äì10)", 0, 10, 5)
        stage_fear = st.selectbox("demam panggung?", ["Yes", "No"])
        social_event = st.slider("kehadiran acara sosial (0‚Äì10)", 0, 10, 5)
        going_outside = st.slider("pergi ke luar (0‚Äì10)", 0, 10, 5)
        drained = st.selectbox("cape setelah bersosialisasi?", ["Yes", "No"])
        friends = st.slider("circle pertemanan (0‚Äì20)", 0, 20, 10)
        post_freq = st.slider("frekuensi posting (0‚Äì10)", 0, 10, 5)

        submit = st.form_submit_button("Prediksi")

    if submit:
        # Konversi kategori ke angka sesuai training
        stage_fear_bin = 1 if stage_fear == "Yes" else 0
        drained_bin = 1 if drained == "Yes" else 0

        input_data = [[alone, stage_fear_bin, social_event, going_outside,
                       drained_bin, friends, post_freq]]

        pred = model.predict(input_data)[0]
        personality = "Introvert" if pred == 1 else "Extrovert"

        st.subheader("Hasil Prediksi")
        st.info(f"Model memprediksi kepribadian: **{personality}**")


# 4. Halaman Anggota Kelompok
elif page == "Anggota Kelompok":
    st.title("üë• Anggota Kelompok")
    st.write("""
    1. HANNY WAHYU KHAIRUN     -2304030050
    2. ALYA SITI FATIMAH       -2304030058 
    3. ALFIAN NOOR KHOERUDIN   -2304030070
    4. ARINI SALMAH            -2304030080
    """)
